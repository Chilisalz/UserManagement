// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserManagementService.DataAccessLayer;

namespace UserManagementService.Migrations
{
    [DbContext(typeof(UserManagementContext))]
    [Migration("20211114112345_InititalCreate")]
    partial class InititalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "39bf46f0-cc42-438f-866c-c20c393a307b",
                            ConcurrencyStamp = "6030eb4c-db57-46ba-8e99-266e2f862379",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "372a7671-ab69-4450-b77f-306aeb4eb8f1",
                            ConcurrencyStamp = "c18e2fd3-2f19-466c-bd7d-3723f882f721",
                            Name = "DefaultChiliUser",
                            NormalizedName = "DEFAULTCHILIUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "0da09c36-50ac-44fb-a102-8b528bcbad51",
                            RoleId = "39bf46f0-cc42-438f-866c-c20c393a307b"
                        },
                        new
                        {
                            UserId = "bf9657c5-0827-44bb-b902-f627d24c0313",
                            RoleId = "372a7671-ab69-4450-b77f-306aeb4eb8f1"
                        },
                        new
                        {
                            UserId = "8c8dd0dd-a6b6-478d-a298-1011cb5bf060",
                            RoleId = "372a7671-ab69-4450-b77f-306aeb4eb8f1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UserManagementService.Models.ChiliUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0da09c36-50ac-44fb-a102-8b528bcbad51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51f5dbf9-b09e-4ebf-9c5d-0edd1e35c919",
                            Email = "adminuser@chiliboard.de",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMINUSER@CHILIBOARD.DE",
                            NormalizedUserName = "CHILISUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBwVLuMhWFGDuFcurTuLa43TV0D1H4eMckFl2MReYzCb6dmHUq2r5MVReQNusIJGyw==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2021, 11, 14, 12, 23, 44, 278, DateTimeKind.Local).AddTicks(8200),
                            SecurityStamp = "PBBLISBKCX2SC2HZZZBU4WAECY4OOEAQ",
                            TwoFactorEnabled = false,
                            UserName = "ChiliSuperAdmin"
                        },
                        new
                        {
                            Id = "bf9657c5-0827-44bb-b902-f627d24c0313",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4a06fd5-06fb-4fb5-8669-80247ced5cdf",
                            Email = "casualUser@web.de",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "CASUALUSER@WEB.DE",
                            NormalizedUserName = "CASUALUSER69420",
                            PasswordHash = "AQAAAAEAACcQAAAAEHu8QZFLJlg43NyyZZ0gpXvkhGRRzX1KgxXuJJAqTqc9r8dT5AIUuyAoq4rcNaJ3nQ==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2021, 11, 14, 12, 23, 44, 284, DateTimeKind.Local).AddTicks(3410),
                            SecurityStamp = "LTH2MYEEUUL6EYVUKLWIA5RUWWJZ7USV",
                            TwoFactorEnabled = false,
                            UserName = "CasualUser69420"
                        },
                        new
                        {
                            Id = "8c8dd0dd-a6b6-478d-a298-1011cb5bf060",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37dc169f-8a94-4962-bec4-1b826f69238c",
                            Email = "catlover@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "CATLOVER@GMAIL.COM",
                            NormalizedUserName = "CATLOVER123",
                            PasswordHash = "AQAAAAEAACcQAAAAENxUCfS0CgnIcJ5orovDoxOaDuqa3/ovj7H8892I4vRhVCOt7pgCj1jTCev93q460w==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2021, 11, 14, 12, 23, 44, 284, DateTimeKind.Local).AddTicks(3523),
                            SecurityStamp = "WZ2YPIJWNNJEIXICV3UT5ITRWDK2QPRZ",
                            TwoFactorEnabled = false,
                            UserName = "CatLover123"
                        });
                });

            modelBuilder.Entity("UserManagementService.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .HasColumnType("text");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UserManagementService.Models.ChiliUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UserManagementService.Models.ChiliUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagementService.Models.ChiliUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UserManagementService.Models.ChiliUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserManagementService.Models.RefreshToken", b =>
                {
                    b.HasOne("UserManagementService.Models.ChiliUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
